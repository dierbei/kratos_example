// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: helloworld/v1/greeter.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BffService_GetUser_FullMethodName    = "/helloworld.v1.BffService/GetUser"
	BffService_CreateUser_FullMethodName = "/helloworld.v1.BffService/CreateUser"
	BffService_UpdateUser_FullMethodName = "/helloworld.v1.BffService/UpdateUser"
	BffService_DeleteUser_FullMethodName = "/helloworld.v1.BffService/DeleteUser"
	BffService_ListUsers_FullMethodName  = "/helloworld.v1.BffService/ListUsers"
)

// BffServiceClient is the client API for BffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BffServiceClient interface {
	// 获取单个用户信息 (GET)
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserRes, error)
	// 创建用户 (POST)
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*GetUserRes, error)
	// 更新用户信息 (PUT)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*GetUserRes, error)
	// 删除用户 (DELETE)
	DeleteUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*DelUserReply, error)
	// 获取用户列表 (GET)
	ListUsers(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserRes, error)
}

type bffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBffServiceClient(cc grpc.ClientConnInterface) BffServiceClient {
	return &bffServiceClient{cc}
}

func (c *bffServiceClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRes)
	err := c.cc.Invoke(ctx, BffService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bffServiceClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*GetUserRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRes)
	err := c.cc.Invoke(ctx, BffService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bffServiceClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*GetUserRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRes)
	err := c.cc.Invoke(ctx, BffService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bffServiceClient) DeleteUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*DelUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelUserReply)
	err := c.cc.Invoke(ctx, BffService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bffServiceClient) ListUsers(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserRes)
	err := c.cc.Invoke(ctx, BffService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BffServiceServer is the server API for BffService service.
// All implementations must embed UnimplementedBffServiceServer
// for forward compatibility.
type BffServiceServer interface {
	// 获取单个用户信息 (GET)
	GetUser(context.Context, *GetUserReq) (*GetUserRes, error)
	// 创建用户 (POST)
	CreateUser(context.Context, *CreateUserReq) (*GetUserRes, error)
	// 更新用户信息 (PUT)
	UpdateUser(context.Context, *UpdateUserReq) (*GetUserRes, error)
	// 删除用户 (DELETE)
	DeleteUser(context.Context, *DelUserReq) (*DelUserReply, error)
	// 获取用户列表 (GET)
	ListUsers(context.Context, *ListUserReq) (*ListUserRes, error)
	mustEmbedUnimplementedBffServiceServer()
}

// UnimplementedBffServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBffServiceServer struct{}

func (UnimplementedBffServiceServer) GetUser(context.Context, *GetUserReq) (*GetUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedBffServiceServer) CreateUser(context.Context, *CreateUserReq) (*GetUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedBffServiceServer) UpdateUser(context.Context, *UpdateUserReq) (*GetUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedBffServiceServer) DeleteUser(context.Context, *DelUserReq) (*DelUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedBffServiceServer) ListUsers(context.Context, *ListUserReq) (*ListUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedBffServiceServer) mustEmbedUnimplementedBffServiceServer() {}
func (UnimplementedBffServiceServer) testEmbeddedByValue()                    {}

// UnsafeBffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BffServiceServer will
// result in compilation errors.
type UnsafeBffServiceServer interface {
	mustEmbedUnimplementedBffServiceServer()
}

func RegisterBffServiceServer(s grpc.ServiceRegistrar, srv BffServiceServer) {
	// If the following call pancis, it indicates UnimplementedBffServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BffService_ServiceDesc, srv)
}

func _BffService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BffServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BffService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BffServiceServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BffService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BffServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BffService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BffServiceServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BffService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BffServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BffService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BffServiceServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BffService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BffServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BffService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BffServiceServer).DeleteUser(ctx, req.(*DelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BffService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BffServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BffService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BffServiceServer).ListUsers(ctx, req.(*ListUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BffService_ServiceDesc is the grpc.ServiceDesc for BffService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BffService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.v1.BffService",
	HandlerType: (*BffServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _BffService_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _BffService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _BffService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _BffService_DeleteUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _BffService_ListUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/v1/greeter.proto",
}
